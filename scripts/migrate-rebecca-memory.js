#!/usr/bin/env node
/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –ë–î –¥–ª—è Rebecca Memory System
 * –°–æ–∑–¥–∞—ë—Ç 5 —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ç—Ä—ë—Ö –≤–∏–¥–æ–≤ –ø–∞–º—è—Ç–∏ + tool_executions + reflections
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/migrate-rebecca-memory.js
 * 
 * –¢—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL
 */

const fs = require("fs");
const path = require("path");
const { Pool } = require("pg");

async function migrate() {
  const dbUrl = process.env.DATABASE_URL;
  
  if (!dbUrl) {
    console.error("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
    process.exit(1);
  }

  console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é Rebecca Memory System...\n");

  const pool = new Pool({
    connectionString: dbUrl,
    ssl: { rejectUnauthorized: false },
  });

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pgvector
    console.log("üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector...");
    const vectorCheck = await pool.query(
      "SELECT EXISTS(SELECT 1 FROM pg_extension WHERE extname = 'vector')"
    );
    
    if (!vectorCheck.rows[0].exists) {
      console.log("‚ö†Ô∏è  pgvector –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...");
      await pool.query("CREATE EXTENSION IF NOT EXISTS vector");
      console.log("‚úÖ pgvector —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    } else {
      console.log("‚úÖ pgvector —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    // –ß–∏—Ç–∞–µ–º SQL —Å—Ö–µ–º—É
    const schemaPath = path.join(__dirname, "../apps/web/src/lib/rebecca/schema.sql");
    const schemaSql = fs.readFileSync(schemaPath, "utf-8");

    console.log("\nüìù –ü—Ä–∏–º–µ–Ω—è–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏—é...");

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º
    const statements = schemaSql
      .split(";")
      .map((s) => s.trim())
      .filter((s) => s.length > 0 && !s.startsWith("--"));

    for (const statement of statements) {
      try {
        await pool.query(statement);
      } catch (err) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!err.message.includes("already exists")) {
          throw err;
        }
      }
    }

    console.log("‚úÖ SQL –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...");
    const tables = await pool.query(`
      SELECT tablename 
      FROM pg_tables 
      WHERE schemaname = 'public' 
        AND tablename IN ('episodic_memory', 'semantic_memory', 'tool_executions', 'reflections', 'agent_sessions')
      ORDER BY tablename
    `);

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.rows.length}/5`);
    tables.rows.forEach((row) => {
      console.log(`   - ${row.tablename}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã...");
    const indexes = await pool.query(`
      SELECT indexname 
      FROM pg_indexes 
      WHERE schemaname = 'public' 
        AND tablename IN ('episodic_memory', 'semantic_memory')
        AND indexname LIKE '%embedding%'
      ORDER BY indexname
    `);

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ vector –∏–Ω–¥–µ–∫—Å–æ–≤: ${indexes.rows.length}`);
    indexes.rows.forEach((row) => {
      console.log(`   - ${row.indexname}`);
    });

    // –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ semantic_memory
    console.log("\nüß™ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å...");
    const testEmbedding = Array(1536).fill(0).map(() => Math.random() * 0.1);
    
    await pool.query(
      `INSERT INTO semantic_memory 
       (namespace, kind, content, confidence, source, embedding)
       VALUES ($1, $2, $3, $4, $5, $6)
       ON CONFLICT DO NOTHING`,
      [
        "rebecca",
        "knowledge",
        "Test knowledge: Rebecca memory system is working",
        0.9,
        "provided",
        `[${testEmbedding.join(",")}]`,
      ]
    );

    const count = await pool.query(
      "SELECT COUNT(*) as count FROM semantic_memory WHERE namespace = 'rebecca'"
    );

    console.log(`‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ semantic_memory: ${count.rows[0].count}`);

    console.log("\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n");

  } catch (error) {
    console.error("\n‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error.message);
    console.error(error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

migrate();
