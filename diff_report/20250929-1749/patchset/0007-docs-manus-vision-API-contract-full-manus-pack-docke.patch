From cda5b435d1dfe68295df0b28983cd34fb0aa835f Mon Sep 17 00:00:00 2001
From: zhenya3133 <verbenkoe@gmail.com>
Date: Wed, 24 Sep 2025 19:58:37 +0300
Subject: [PATCH 07/14] docs(manus): vision, API contract, full manus pack;
 docker-compose + env example

---
 apps/web/src/lib/retriever_v2.backup.ts | 126 ------------------------
 docker-compose.yml                      |  42 ++++++++
 docs/manus/API_CONTRACT.md              |  33 +++++++
 docs/manus/VISION.md                    |   8 ++
 4 files changed, 83 insertions(+), 126 deletions(-)
 delete mode 100755 apps/web/src/lib/retriever_v2.backup.ts
 create mode 100644 docker-compose.yml
 create mode 100644 docs/manus/API_CONTRACT.md
 create mode 100644 docs/manus/VISION.md

diff --git a/apps/web/src/lib/retriever_v2.backup.ts b/apps/web/src/lib/retriever_v2.backup.ts
deleted file mode 100755
index 60e3b26..0000000
--- a/apps/web/src/lib/retriever_v2.backup.ts
+++ /dev/null
@@ -1,126 +0,0 @@
-import { q } from "@/lib/db";
-import OpenAI from "openai";
-import { RECENCY, timeDecay } from "@/lib/recency";
-
-const EMBED_MODEL = process.env.EMBED_MODEL || "text-embedding-3-small";
-const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
-
-export type RetrieveOpts = {
-  ns: string;
-  query: string;
-  fetchK?: number;
-  topK?: number;
-  minScore?: number;
-  slot?: "staging" | "prod";
-  lambda?: number;
-};
-
-export type RetrievedChunk = {
-  id: string;
-  content: string;
-  source: any | null;
-  created_at: string;
-  dense: number;
-  bm25: number;
-  age_days: number;
-  emb: number[];
-  final: number;
-};
-
-function nsRecency(ns: string) {
-  return RECENCY[ns] || { halfLifeDays: 180, ttlDays: 365, alpha: 0.75, beta: 0.15, gamma: 0.10 };
-}
-
-function parsePgVectorText(s: string): number[] {
-  const m = /^\s*\[([^\]]*)\]\s*$/.exec(String(s ?? ""));
-  if (!m) return [];
-  return m[1].split(",").map(x => Number(x.trim())).filter(v => Number.isFinite(v));
-}
-
-async function embedQuery(text: string): Promise<number[]> {
-  const r = await openai.embeddings.create({ model: EMBED_MODEL, input: [text] });
-  return r.data[0].embedding as unknown as number[];
-}
-
-async function dbCandidates(ns: string, query: string, qVec: number[], slot: "staging" | "prod", fetchK: number): Promise<RetrievedChunk[]> {
-  const qvecText = "[" + qVec.map(x => Number(x).toFixed(6)).join(",") + "]";
-const rows = await q<any>(`
-  with base as (
-    select
-      id,
-      content,
-      source,
-      created_at,
-      (1 - (embedding <=> $2::vector)) as dense,
-      ts_rank(to_tsvector('simple', content), plainto_tsquery('simple', $1)) as bm25,
-      extract(epoch from (now() - created_at))/86400.0 as age_days,
-      (embedding::text) as emb_text
-    from chunks
-    where ns = $3 and slot = $4
-  )
-  select * from base
-  order by (dense + bm25) desc
-  limit $5;
-`, [query, qvecText, ns, slot, fetchK]);
-
-
-  return rows.map(r => ({
-    id: r.id,
-    content: r.content,
-    source: r.source || null,
-    created_at: r.created_at,
-    dense: Number(r.dense) || 0,
-    bm25: Math.min(Number(r.bm25) || 0, 1),
-    age_days: Math.max(Number(r.age_days) || 0, 0),
-    emb: parsePgVectorText(r.emb_text),
-    final: 0
-  }));
-}
-
-function cos(a: number[], b: number[]): number {
-  let num = 0, na = 0, nb = 0;
-  for (let i = 0; i < a.length && i < b.length; i++) {
-    const x = a[i], y = b[i];
-    num += x * y; na += x * x; nb += y * y;
-  }
-  const den = Math.sqrt(na) * Math.sqrt(nb) || 1e-8;
-  return num / den;
-}
-
-function mmrSelect(qVec: number[], cand: RetrievedChunk[], topK: number, lambda = 0.7): RetrievedChunk[] {
-  const selected: RetrievedChunk[] = [];
-  const rest = cand.slice();
-  while (selected.length < topK && rest.length > 0) {
-    let bestIdx = 0, bestScore = -Infinity;
-    for (let i = 0; i < rest.length; i++) {
-      const c = rest[i];
-      const rel = cos(qVec, c.emb);
-      let div = 0;
-      for (const s of selected) div = Math.max(div, cos(c.emb, s.emb));
-      const mmr = lambda * rel - (1 - lambda) * div;
-      if (mmr > bestScore) { bestScore = mmr; bestIdx = i; }
-    }
-    selected.push(rest.splice(bestIdx, 1)[0]);
-  }
-  return selected;
-}
-
-export async function retrieveV2(opts: RetrieveOpts): Promise<RetrievedChunk[]> {
-  const { ns, query, fetchK = 24, topK = 8, minScore = 0.52, slot = "staging", lambda = 0.7 } = opts;
-
-  const qVec = await embedQuery(query);
-  const rc = nsRecency(ns);
-  let cand = await dbCandidates(ns, query, qVec, slot, fetchK);
-
-  cand = cand.map(c => {
-    const t = timeDecay(c.age_days, rc.halfLifeDays);
-    const final = rc.alpha * c.dense + rc.gamma * c.bm25 + rc.beta * t;
-    return { ...c, final };
-  });
-
-  cand = cand.filter(c => c.final >= minScore).sort((a,b) => b.final - a.final);
-
-  const picked = mmrSelect(qVec, cand, Math.min(topK, cand.length), lambda);
-  picked.sort((a,b) => b.final - a.final);
-  return picked;
-}
diff --git a/docker-compose.yml b/docker-compose.yml
new file mode 100644
index 0000000..6e21550
--- /dev/null
+++ b/docker-compose.yml
@@ -0,0 +1,42 @@
+version: "3.9"
+services:
+  db:
+    image: pgvector/pgvector:pg16
+    container_name: freya-db
+    environment:
+      POSTGRES_DB: freya
+      POSTGRES_USER: freya
+      POSTGRES_PASSWORD: freya
+    ports:
+      - "5432:5432"
+    volumes:
+      - freya_db:/var/lib/postgresql/data
+    healthcheck:
+      test: ["CMD-SHELL", "pg_isready -U freya -d freya"]
+      interval: 5s
+      timeout: 3s
+      retries: 20
+
+  web:
+    build:
+      context: .
+      dockerfile: ./apps/web/Dockerfile
+    container_name: freya-web
+    env_file:
+      - ./apps/web/.env.local
+    environment:
+      PGHOST: db
+      PGPORT: 5432
+      PGDATABASE: freya
+      PGUSER: freya
+      PGPASSWORD: freya
+      PORT: 3000
+    depends_on:
+      db:
+        condition: service_healthy
+    ports:
+      - "3000:3000"
+    command: sh -c "npm i && npm run dev --prefix apps/web"
+
+volumes:
+  freya_db:
diff --git a/docs/manus/API_CONTRACT.md b/docs/manus/API_CONTRACT.md
new file mode 100644
index 0000000..a2e75fd
--- /dev/null
+++ b/docs/manus/API_CONTRACT.md
@@ -0,0 +1,33 @@
+# API Contract RC-v1 (кратко)
+
+## POST /api/retrieve
+Request:
+{
+  "q": "string",
+  "ns": "string",
+  "slot": "staging|prod",
+  "nsMode": "prefix|exact",
+  "topK": number,
+  "candidateK": number,
+  "minSimilarity": number,
+  "domainFilter": { "allow"?: string[], "deny"?: string[] }
+}
+
+Response:
+{
+  "items": [{
+    "url": "string", "title": "string|null", "content": "string",
+    "score": number, "ns": "string", "slot": "staging|prod"
+  }],
+  "debugVersion": "rc-v1",
+  "filterInfo"?: any
+}
+
+## POST /api/ingest/url
+{ "ns":"...", "slot":"staging|prod", "urls":["https://..."], "chunk":{"chars":1200,"overlap":150} }
+
+## POST /api/ingest/pdf
+{ "ns":"...", "slot":"staging|prod", "url":"https://...|file://..." }
+
+## POST /api/ingest/github
+{ "ns":"...", "slot":"staging|prod", "owner":"...", "repo":"...", "ref":"main", "includeExt":[".md"], "limit":10 }
diff --git a/docs/manus/VISION.md b/docs/manus/VISION.md
new file mode 100644
index 0000000..afe5c7b
--- /dev/null
+++ b/docs/manus/VISION.md
@@ -0,0 +1,8 @@
+# Vision: Фрея (Генерал ИИ) и Ребекка (Архитектор ИИ-агентов)
+
+Цель: построить управляемую систему ИИ-агентов, где **Фрея** принимает команды пользователя и делегирует их **Ребекке**, которая:
+- агрегирует и запоминает передовые практики по созданию ИИ-агентов (архитектура, код, пайплайны),
+- предлагает архитектуру/структуру нового агента,
+- после согласования собирает его и коммитит в GitHub (через инструменты/интеграции).
+
+ИКР (идеальная конечная реализация): RC-v1 retrieval + ingest; память источников; автогенерация агента из подтверждённого плана; CI/CD на GitHub.
-- 
2.43.0

