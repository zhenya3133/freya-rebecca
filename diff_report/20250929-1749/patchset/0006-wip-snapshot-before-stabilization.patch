From e058bfb2578e4da5c75dcd1883f776e4b3062e58 Mon Sep 17 00:00:00 2001
From: zhenya3133 <verbenkoe@gmail.com>
Date: Wed, 24 Sep 2025 02:37:29 +0300
Subject: [PATCH 06/14] wip: snapshot before stabilization

---
 .gitattributes                                |   0
 .gitignore                                    |   0
 apps/web/.eslintrc.json                       |   0
 apps/web/.gitignore                           |   0
 apps/web/Ping-4O.ps1                          |   0
 apps/web/README.md                            |   0
 apps/web/Run-Rag.backup.ps1                   |   0
 apps/web/Run-Rag.ps1                          |   0
 apps/web/Sync-Memory.ps1                      |   0
 apps/web/agents.prod.json                     |   0
 apps/web/answer.json                          |   0
 apps/web/ask.json                             |   0
 apps/web/docs/CHANGELOG.md                    |   0
 apps/web/eslint.config.mjs                    |   0
 apps/web/freya-rebecca-v0.4.0.bundle          | Bin
 apps/web/middleware.ts                        |   0
 apps/web/migrations/2025-08-27_rag_logs.sql   |   0
 apps/web/next.config.mjs                      |   0
 apps/web/package.json                         |   2 +-
 .../0001-release-main-29.08.2025.patch        |   0
 apps/web/public/file.svg                      |   0
 apps/web/public/globe.svg                     |   0
 apps/web/public/next.svg                      |   0
 apps/web/public/vercel.svg                    |   0
 apps/web/public/window.svg                    |   0
 apps/web/resp-gpt5.json                       |   0
 apps/web/scripts/e2e/bootstrap_demo.sh        | 136 ++++++-----
 apps/web/seed.json                            |   0
 apps/web/seeds/agents/rebecca.core.v1.json    |   0
 apps/web/seeds/army/seed.json                 |   0
 apps/web/seeds/profiles/analyst.json          |   0
 apps/web/seeds/profiles/docs.json             |   0
 apps/web/seeds/profiles/qa.json               |   0
 apps/web/seeds/profiles/rag.json              |   0
 .../seeds/profiles/rebecca.profiles.v1.json   |   0
 apps/web/seeds/profiles/security.json         |   0
 apps/web/seeds/profiles/toolsmith.json        |   0
 apps/web/seeds/rebecca/01-architecture.md     |   0
 apps/web/seeds/rebecca/02-rag-pipeline.md     |   0
 apps/web/seeds/rebecca/03-prompts-style.md    |   0
 apps/web/seeds/rebecca/04-kb-curation.md      |   0
 apps/web/seeds/refs/agents/autogen.md         |   0
 apps/web/seeds/refs/agents/crewai.md          |   0
 apps/web/seeds/refs/agents/guardrails.md      |   0
 apps/web/seeds/refs/agents/langgraph.md       |   0
 apps/web/seeds/refs/agents/llamaindex.md      |   0
 apps/web/seeds/refs/agents/openai-agents.md   |   0
 apps/web/seeds/refs/seed.json                 |   0
 apps/web/src/app/admin/ingest/page.tsx        |   0
 apps/web/src/app/admin/logs/page.tsx          |   0
 apps/web/src/app/admin/memory/page.tsx        |   0
 apps/web/src/app/admin/playground/page.tsx    |   0
 apps/web/src/app/admin/profiles/page.tsx      |   0
 apps/web/src/app/admin/traces/page.tsx        |   0
 .../20250914-235609/freya-initiative/route.ts |   0
 .../memory-import/github/route.ts             |   0
 .../memory-import/plain/route.ts              |   0
 apps/web/src/app/api/admin/echo/route.ts      |   0
 apps/web/src/app/api/admin/logs/list/route.ts |   0
 apps/web/src/app/api/admin/sql/route.ts       |   0
 apps/web/src/app/api/admin/whoami/route.ts    |   0
 apps/web/src/app/api/agents/save/route.ts     |   0
 apps/web/src/app/api/debug/admin/route.ts     |   0
 apps/web/src/app/api/debug/logs/route.ts      |   0
 .../src/app/api/dev/db/create-logs/route.ts   |   0
 apps/web/src/app/api/diag/chunks/route.ts     |   0
 apps/web/src/app/api/diag/emb-ping/route.ts   |   0
 apps/web/src/app/api/diag/gh-rate/route.ts    |   0
 apps/web/src/app/api/diag/github/route.ts     |   0
 apps/web/src/app/api/diag/llm/route.ts        |   0
 apps/web/src/app/api/diag/mem-stats/route.ts  |   0
 apps/web/src/app/api/diag/wipe-ns/route.ts    |   0
 apps/web/src/app/api/evals/smoke/route.ts     |   0
 apps/web/src/app/api/evals/trace/route.ts     |   0
 .../src/app/api/evals/traces/export/route.ts  |   0
 apps/web/src/app/api/evals/traces/route.ts    |   0
 apps/web/src/app/api/health/db/route.ts       |   0
 apps/web/src/app/api/health/env/route.ts      |   0
 apps/web/src/app/api/ingest/pdf/route.ts      | 148 +++++++-----
 apps/web/src/app/api/ingest/url/route.ts      | 185 ++++++++++-----
 apps/web/src/app/api/ingest/youtube/route.ts  |   0
 .../src/app/api/initiatives/recent/route.ts   |   0
 apps/web/src/app/api/logs/list/route.ts       |   0
 apps/web/src/app/api/memory/delete/route.ts   |   0
 apps/web/src/app/api/memory/ingest/route.ts   |   0
 apps/web/src/app/api/memory/list/route.ts     |   0
 apps/web/src/app/api/memory/promote/route.ts  |   0
 apps/web/src/app/api/memory/route.ts          |   0
 apps/web/src/app/api/memory/search/route.ts   |   0
 .../src/app/api/memory/suggest-ns/route.ts    |   0
 apps/web/src/app/api/memory/upsert/route.ts   |   0
 apps/web/src/app/api/ns/route.ts              |   0
 apps/web/src/app/api/profiles/delete/route.ts |   0
 apps/web/src/app/api/profiles/get/route.ts    |   0
 apps/web/src/app/api/profiles/save/route.ts   |   0
 .../src/app/api/rag/answer-guarded/route.ts   |   0
 .../api/rag/answer-logged-guarded/route.ts    |   0
 .../src/app/api/rag/answer-logged/route.ts    |   0
 apps/web/src/app/api/rag/answer/route.ts      |   0
 apps/web/src/app/api/rag/ask-guarded/route.ts |   0
 apps/web/src/app/api/rag/ask/route.ts         |   0
 apps/web/src/app/api/rebecca/execute/route.ts |   0
 apps/web/src/app/api/retrieve/route.ts        | 129 ++++-------
 apps/web/src/app/api/schema/columns/route.ts  |   0
 apps/web/src/app/chat/page.tsx                |   0
 apps/web/src/app/favicon.ico                  | Bin
 apps/web/src/app/globals.css                  |   0
 apps/web/src/app/icon.svg                     |   0
 apps/web/src/app/layout.tsx                   |   0
 apps/web/src/app/page.module.css              |   0
 apps/web/src/app/page.tsx                     |   0
 apps/web/src/app/playground/page.tsx          |   0
 apps/web/src/lib/admin-auth.ts                |   0
 apps/web/src/lib/admin-guard.ts               |   0
 apps/web/src/lib/adminAuth.ts                 |   0
 apps/web/src/lib/auth.ts                      |   0
 apps/web/src/lib/chunk.ts                     |   0
 apps/web/src/lib/chunking.ts                  |   0
 apps/web/src/lib/contracts.ts                 |   0
 apps/web/src/lib/db.ts                        |   0
 apps/web/src/lib/domain_filter.ts             |  20 ++
 apps/web/src/lib/embeddings.ts                |   0
 apps/web/src/lib/env.ts                       |   0
 apps/web/src/lib/guardrails.ts                |   0
 apps/web/src/lib/hash.ts                      |   0
 apps/web/src/lib/ingest_upsert.ts             | 215 ++++++++++++++++++
 apps/web/src/lib/log.ts                       |   0
 apps/web/src/lib/logs.ts                      |   0
 apps/web/src/lib/namespaces.ts                |   0
 apps/web/src/lib/ns.ts                        |   0
 apps/web/src/lib/profile-runtime.ts           |   0
 apps/web/src/lib/profiles.ts                  |   0
 apps/web/src/lib/rag-core.ts                  |   0
 apps/web/src/lib/rate_limit.ts                |   0
 apps/web/src/lib/recency.ts                   |   0
 apps/web/src/lib/redact.ts                    |   0
 apps/web/src/lib/retrieval-contract.ts        |  43 ++++
 apps/web/src/lib/retriever.ts                 |   0
 apps/web/src/lib/retriever_v2.backup.ts       |   0
 apps/web/src/lib/retriever_v2.ts              |   2 +-
 apps/web/src/lib/schemas/agent.ts             |   0
 apps/web/src/lib/similarity.ts                |   0
 apps/web/src/lib/suggestNs.ts                 |   0
 apps/web/src/types/ambient.d.ts               |  12 +
 apps/web/tests/Smoke-Evals.ps1                |   0
 apps/web/tests/golden.json                    |   0
 apps/web/traces.csv                           |   0
 apps/web/tsconfig.backup.json                 |   0
 apps/web/tsconfig.json                        |  40 ++--
 docs/CHANGELOG.md                             |   0
 env-check.ps1                                 |   0
 package-lock.json                             |  42 ++++
 scripts/repair_published_at.sh                |   0
 153 files changed, 707 insertions(+), 267 deletions(-)
 mode change 100644 => 100755 .gitattributes
 mode change 100644 => 100755 .gitignore
 mode change 100644 => 100755 apps/web/.eslintrc.json
 mode change 100644 => 100755 apps/web/.gitignore
 mode change 100644 => 100755 apps/web/Ping-4O.ps1
 mode change 100644 => 100755 apps/web/README.md
 mode change 100644 => 100755 apps/web/Run-Rag.backup.ps1
 mode change 100644 => 100755 apps/web/Run-Rag.ps1
 mode change 100644 => 100755 apps/web/Sync-Memory.ps1
 mode change 100644 => 100755 apps/web/agents.prod.json
 mode change 100644 => 100755 apps/web/answer.json
 mode change 100644 => 100755 apps/web/ask.json
 mode change 100644 => 100755 apps/web/docs/CHANGELOG.md
 mode change 100644 => 100755 apps/web/eslint.config.mjs
 mode change 100644 => 100755 apps/web/freya-rebecca-v0.4.0.bundle
 mode change 100644 => 100755 apps/web/middleware.ts
 mode change 100644 => 100755 apps/web/migrations/2025-08-27_rag_logs.sql
 mode change 100644 => 100755 apps/web/next.config.mjs
 mode change 100644 => 100755 apps/web/patches/0001-release-main-29.08.2025.patch
 mode change 100644 => 100755 apps/web/public/file.svg
 mode change 100644 => 100755 apps/web/public/globe.svg
 mode change 100644 => 100755 apps/web/public/next.svg
 mode change 100644 => 100755 apps/web/public/vercel.svg
 mode change 100644 => 100755 apps/web/public/window.svg
 mode change 100644 => 100755 apps/web/resp-gpt5.json
 mode change 100644 => 100755 apps/web/seed.json
 mode change 100644 => 100755 apps/web/seeds/agents/rebecca.core.v1.json
 mode change 100644 => 100755 apps/web/seeds/army/seed.json
 mode change 100644 => 100755 apps/web/seeds/profiles/analyst.json
 mode change 100644 => 100755 apps/web/seeds/profiles/docs.json
 mode change 100644 => 100755 apps/web/seeds/profiles/qa.json
 mode change 100644 => 100755 apps/web/seeds/profiles/rag.json
 mode change 100644 => 100755 apps/web/seeds/profiles/rebecca.profiles.v1.json
 mode change 100644 => 100755 apps/web/seeds/profiles/security.json
 mode change 100644 => 100755 apps/web/seeds/profiles/toolsmith.json
 mode change 100644 => 100755 apps/web/seeds/rebecca/01-architecture.md
 mode change 100644 => 100755 apps/web/seeds/rebecca/02-rag-pipeline.md
 mode change 100644 => 100755 apps/web/seeds/rebecca/03-prompts-style.md
 mode change 100644 => 100755 apps/web/seeds/rebecca/04-kb-curation.md
 mode change 100644 => 100755 apps/web/seeds/refs/agents/autogen.md
 mode change 100644 => 100755 apps/web/seeds/refs/agents/crewai.md
 mode change 100644 => 100755 apps/web/seeds/refs/agents/guardrails.md
 mode change 100644 => 100755 apps/web/seeds/refs/agents/langgraph.md
 mode change 100644 => 100755 apps/web/seeds/refs/agents/llamaindex.md
 mode change 100644 => 100755 apps/web/seeds/refs/agents/openai-agents.md
 mode change 100644 => 100755 apps/web/seeds/refs/seed.json
 mode change 100644 => 100755 apps/web/src/app/admin/ingest/page.tsx
 mode change 100644 => 100755 apps/web/src/app/admin/logs/page.tsx
 mode change 100644 => 100755 apps/web/src/app/admin/memory/page.tsx
 mode change 100644 => 100755 apps/web/src/app/admin/playground/page.tsx
 mode change 100644 => 100755 apps/web/src/app/admin/profiles/page.tsx
 mode change 100644 => 100755 apps/web/src/app/admin/traces/page.tsx
 mode change 100644 => 100755 apps/web/src/app/api/_archive/20250914-235609/freya-initiative/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/_archive/20250914-235609/memory-import/github/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/_archive/20250914-235609/memory-import/plain/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/admin/echo/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/admin/logs/list/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/admin/sql/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/admin/whoami/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/agents/save/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/debug/admin/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/debug/logs/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/dev/db/create-logs/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/diag/chunks/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/diag/emb-ping/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/diag/gh-rate/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/diag/github/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/diag/llm/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/diag/mem-stats/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/diag/wipe-ns/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/evals/smoke/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/evals/trace/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/evals/traces/export/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/evals/traces/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/health/db/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/health/env/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/ingest/youtube/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/initiatives/recent/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/logs/list/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/memory/delete/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/memory/ingest/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/memory/list/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/memory/promote/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/memory/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/memory/search/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/memory/suggest-ns/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/memory/upsert/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/ns/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/profiles/delete/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/profiles/get/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/profiles/save/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/rag/answer-guarded/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/rag/answer-logged-guarded/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/rag/answer-logged/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/rag/answer/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/rag/ask-guarded/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/rag/ask/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/rebecca/execute/route.ts
 mode change 100644 => 100755 apps/web/src/app/api/schema/columns/route.ts
 mode change 100644 => 100755 apps/web/src/app/chat/page.tsx
 mode change 100644 => 100755 apps/web/src/app/favicon.ico
 mode change 100644 => 100755 apps/web/src/app/globals.css
 mode change 100644 => 100755 apps/web/src/app/icon.svg
 mode change 100644 => 100755 apps/web/src/app/layout.tsx
 mode change 100644 => 100755 apps/web/src/app/page.module.css
 mode change 100644 => 100755 apps/web/src/app/page.tsx
 mode change 100644 => 100755 apps/web/src/app/playground/page.tsx
 mode change 100644 => 100755 apps/web/src/lib/admin-auth.ts
 mode change 100644 => 100755 apps/web/src/lib/admin-guard.ts
 mode change 100644 => 100755 apps/web/src/lib/adminAuth.ts
 mode change 100644 => 100755 apps/web/src/lib/auth.ts
 mode change 100644 => 100755 apps/web/src/lib/chunk.ts
 mode change 100644 => 100755 apps/web/src/lib/chunking.ts
 mode change 100644 => 100755 apps/web/src/lib/contracts.ts
 mode change 100644 => 100755 apps/web/src/lib/db.ts
 create mode 100644 apps/web/src/lib/domain_filter.ts
 mode change 100644 => 100755 apps/web/src/lib/embeddings.ts
 mode change 100644 => 100755 apps/web/src/lib/env.ts
 mode change 100644 => 100755 apps/web/src/lib/guardrails.ts
 mode change 100644 => 100755 apps/web/src/lib/hash.ts
 create mode 100644 apps/web/src/lib/ingest_upsert.ts
 mode change 100644 => 100755 apps/web/src/lib/log.ts
 mode change 100644 => 100755 apps/web/src/lib/logs.ts
 mode change 100644 => 100755 apps/web/src/lib/namespaces.ts
 mode change 100644 => 100755 apps/web/src/lib/ns.ts
 mode change 100644 => 100755 apps/web/src/lib/profile-runtime.ts
 mode change 100644 => 100755 apps/web/src/lib/profiles.ts
 mode change 100644 => 100755 apps/web/src/lib/rag-core.ts
 mode change 100644 => 100755 apps/web/src/lib/rate_limit.ts
 mode change 100644 => 100755 apps/web/src/lib/recency.ts
 mode change 100644 => 100755 apps/web/src/lib/redact.ts
 create mode 100644 apps/web/src/lib/retrieval-contract.ts
 mode change 100644 => 100755 apps/web/src/lib/retriever.ts
 mode change 100644 => 100755 apps/web/src/lib/retriever_v2.backup.ts
 mode change 100644 => 100755 apps/web/src/lib/schemas/agent.ts
 mode change 100644 => 100755 apps/web/src/lib/similarity.ts
 mode change 100644 => 100755 apps/web/src/lib/suggestNs.ts
 create mode 100644 apps/web/src/types/ambient.d.ts
 mode change 100644 => 100755 apps/web/tests/Smoke-Evals.ps1
 mode change 100644 => 100755 apps/web/tests/golden.json
 mode change 100644 => 100755 apps/web/traces.csv
 mode change 100644 => 100755 apps/web/tsconfig.backup.json
 mode change 100644 => 100755 apps/web/tsconfig.json
 mode change 100644 => 100755 docs/CHANGELOG.md
 mode change 100644 => 100755 env-check.ps1
 mode change 100644 => 100755 scripts/repair_published_at.sh

diff --git a/.gitattributes b/.gitattributes
old mode 100644
new mode 100755
diff --git a/.gitignore b/.gitignore
old mode 100644
new mode 100755
diff --git a/apps/web/.eslintrc.json b/apps/web/.eslintrc.json
old mode 100644
new mode 100755
diff --git a/apps/web/.gitignore b/apps/web/.gitignore
old mode 100644
new mode 100755
diff --git a/apps/web/Ping-4O.ps1 b/apps/web/Ping-4O.ps1
old mode 100644
new mode 100755
diff --git a/apps/web/README.md b/apps/web/README.md
old mode 100644
new mode 100755
diff --git a/apps/web/Run-Rag.backup.ps1 b/apps/web/Run-Rag.backup.ps1
old mode 100644
new mode 100755
diff --git a/apps/web/Run-Rag.ps1 b/apps/web/Run-Rag.ps1
old mode 100644
new mode 100755
diff --git a/apps/web/Sync-Memory.ps1 b/apps/web/Sync-Memory.ps1
old mode 100644
new mode 100755
diff --git a/apps/web/agents.prod.json b/apps/web/agents.prod.json
old mode 100644
new mode 100755
diff --git a/apps/web/answer.json b/apps/web/answer.json
old mode 100644
new mode 100755
diff --git a/apps/web/ask.json b/apps/web/ask.json
old mode 100644
new mode 100755
diff --git a/apps/web/docs/CHANGELOG.md b/apps/web/docs/CHANGELOG.md
old mode 100644
new mode 100755
diff --git a/apps/web/eslint.config.mjs b/apps/web/eslint.config.mjs
old mode 100644
new mode 100755
diff --git a/apps/web/freya-rebecca-v0.4.0.bundle b/apps/web/freya-rebecca-v0.4.0.bundle
old mode 100644
new mode 100755
diff --git a/apps/web/middleware.ts b/apps/web/middleware.ts
old mode 100644
new mode 100755
diff --git a/apps/web/migrations/2025-08-27_rag_logs.sql b/apps/web/migrations/2025-08-27_rag_logs.sql
old mode 100644
new mode 100755
diff --git a/apps/web/next.config.mjs b/apps/web/next.config.mjs
old mode 100644
new mode 100755
diff --git a/apps/web/package.json b/apps/web/package.json
index 8b15a19..a06dea5 100644
--- a/apps/web/package.json
+++ b/apps/web/package.json
@@ -1 +1 @@
-{"name":"web","version":"0.1.0","private":true,"scripts":{"dev":"next dev --turbopack","build":"next build","start":"next start","lint":"next lint","migrate:g0":"node ./scripts/migrate-g0.js","smoke":"pwsh ./apps/web/tests/Smoke-Evals.ps1"},"dependencies":{"@mozilla/readability":"^0.6.0","cheerio":"^1.1.2","dotenv":"^17.2.1","gray-matter":"^4.0.3","jsdom":"^26.1.0","next":"15.4.6","openai":"^5.13.1","pg":"^8.16.3","react":"19.1.0","react-dom":"19.1.0","youtube-transcript":"^1.2.1","zod":"^3.25.76"},"devDependencies":{"@eslint/eslintrc":"^3","@types/node":"^20","@types/react":"^19","@types/react-dom":"^19","eslint":"^9","eslint-config-next":"15.4.6","typescript":"^5"}}
\ No newline at end of file
+{"name":"web","version":"0.1.0","private":true,"scripts":{"dev":"next dev --turbopack","build":"next build","start":"next start","lint":"next lint","migrate:g0":"node ./scripts/migrate-g0.js","smoke":"pwsh ./apps/web/tests/Smoke-Evals.ps1"},"dependencies":{"@mozilla/readability":"^0.6.0","cheerio":"^1.1.2","dotenv":"^17.2.1","gray-matter":"^4.0.3","jsdom":"^26.1.0","next":"15.4.6","openai":"^5.13.1","pdf-parse":"^1.1.1","pg":"^8.16.3","react":"19.1.0","react-dom":"19.1.0","youtube-transcript":"^1.2.1","zod":"^3.25.76"},"devDependencies":{"@eslint/eslintrc":"^3","@types/node":"^20","@types/pg":"^8.15.5","@types/react":"^19","@types/react-dom":"^19","eslint":"^9","eslint-config-next":"15.4.6","typescript":"^5"}}
\ No newline at end of file
diff --git a/apps/web/patches/0001-release-main-29.08.2025.patch b/apps/web/patches/0001-release-main-29.08.2025.patch
old mode 100644
new mode 100755
diff --git a/apps/web/public/file.svg b/apps/web/public/file.svg
old mode 100644
new mode 100755
diff --git a/apps/web/public/globe.svg b/apps/web/public/globe.svg
old mode 100644
new mode 100755
diff --git a/apps/web/public/next.svg b/apps/web/public/next.svg
old mode 100644
new mode 100755
diff --git a/apps/web/public/vercel.svg b/apps/web/public/vercel.svg
old mode 100644
new mode 100755
diff --git a/apps/web/public/window.svg b/apps/web/public/window.svg
old mode 100644
new mode 100755
diff --git a/apps/web/resp-gpt5.json b/apps/web/resp-gpt5.json
old mode 100644
new mode 100755
diff --git a/apps/web/scripts/e2e/bootstrap_demo.sh b/apps/web/scripts/e2e/bootstrap_demo.sh
index f814f66..8a7bfc8 100755
--- a/apps/web/scripts/e2e/bootstrap_demo.sh
+++ b/apps/web/scripts/e2e/bootstrap_demo.sh
@@ -1,81 +1,109 @@
+# apps/web/scripts/e2e/bootstrap_demo.sh
 #!/usr/bin/env bash
 set -euo pipefail
 
-WEB_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
-cd "$WEB_DIR"
-
-: "${DATABASE_URL:?DATABASE_URL is required}"
+WEB_DIR="$(cd "$(dirname "$0")/../../.." && pwd)/web"
 BASE="${BASE:-http://localhost:3000}"
 NS="${NS:-rebecca/army/refs}"
 SLOT="${SLOT:-staging}"
-X_ADMIN_KEY="${X_ADMIN_KEY:-${ADMIN:-}}"
+
+# админ-ключ обязателен для /api/ingest/*
+ADMIN="${X_ADMIN_KEY:-${X_ADMIN_KEY_FILE:+$(cat "$X_ADMIN_KEY_FILE")}}"
+
+# локальный PDF (для удобства на WSL/Windows)
+LOCAL_PDF="${LOCAL_PDF:-}"
 
 echo "WEB_DIR=$WEB_DIR"
 echo "BASE=$BASE"
 echo "NS=$NS SLOT=$SLOT"
 
-psql_np() { psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -P pager=off "$@"; }
-show_or_err() { jq 'if .ok==true or .ok==null then . else {ok,stage,error} end'; }
-
-# опциональный заголовок x-admin-key
-HDR_AUTH=()
-if [[ -n "${X_ADMIN_KEY:-}" ]]; then
-  HDR_AUTH=(-H "x-admin-key: ${X_ADMIN_KEY}")
+if [[ -z "${ADMIN:-}" ]]; then
+  echo "ERROR: X_ADMIN_KEY не задан. Экспортни его (или X_ADMIN_KEY_FILE) и перезапусти." >&2
+  exit 1
 fi
 
+# маленький хелпер: POST JSON, печатаем код и тело; при 2xx — прогоняем через jq
+post_json () {
+  local endpoint="$1"; shift
+  local json="$1"; shift
+
+  local tmp="$(mktemp)"
+  local code
+  code=$(curl -sS -o "$tmp" -w '%{http_code}' \
+    -X POST "$BASE$endpoint" \
+    -H 'content-type: application/json' \
+    -H "x-admin-key: ${ADMIN}" \
+    --data "$json" || true)
+
+  if [[ "$code" =~ ^2 ]]; then
+    # корректный JSON → можно выборочно показать поля
+    jq . "$tmp"
+  else
+    echo "HTTP $code"
+    cat "$tmp"
+    rm -f "$tmp"
+    exit 1
+  fi
+  rm -f "$tmp"
+}
+
+# 0) подчистим
 echo ">> TRUNCATE chunks for ns=$NS slot=$SLOT"
-psql_np -v ns="$NS" -v slot="$SLOT" <<'SQL'
-DELETE FROM chunks WHERE ns = :'ns' AND slot = :'slot';
-SQL
+psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -P pager=off -c \
+  "DELETE FROM chunks WHERE ns = '$NS' AND slot = '$SLOT';"
 
+# 1) ingest URL (MDN)
 echo ">> ingest URL (MDN)"
-jq -n --arg ns "$NS" --arg slot "$SLOT" '
-{
-  ns: $ns,
-  slot: $slot,
-  urls: [
+URL_BODY=$(jq -n \
+  --arg ns   "$NS" \
+  --arg slot "$SLOT" \
+  --argjson urls '[
     "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Event_loop",
     "https://developer.mozilla.org/en-US/docs/Web/API/Console/table",
     "https://developer.mozilla.org/en-US/docs/Web/API/console/time"
-  ],
-  chunk: { chars: 1200, overlap: 150 }
-}
-' | curl -sS -X POST "$BASE/api/ingest/url" \
-      -H 'content-type: application/json' "${HDR_AUTH[@]}" \
-      -d @- | show_or_err
+  ]' \
+  '{
+     ns: $ns, slot: $slot,
+     urls: $urls,
+     chunk: { chars: 1200, overlap: 150 }
+   }')
+post_json "/api/ingest/url" "$URL_BODY" | jq '{ok, textChunks, textInserted, textUpdated, failures}'
 
-PDF_URL="${LOCAL_PDF:-https://arxiv.org/pdf/2402.19472.pdf}"
+# 2) ingest PDF (локалка или небольшой публичный PDF)
+PDF_URL="$LOCAL_PDF"
+if [[ -z "$PDF_URL" ]]; then
+  PDF_URL="https://arxiv.org/pdf/2402.19472.pdf"
+fi
 echo ">> ingest PDF ($PDF_URL)"
-jq -n --arg ns "$NS" --arg slot "$SLOT" --arg url "$PDF_URL" '
-{
-  ns: $ns,
-  slot: $slot,
-  url: $url,
-  chunk: { chars: 1200, overlap: 150 }
-}
-' | curl -sS -X POST "$BASE/api/ingest/pdf" \
-      -H 'content-type: application/json' "${HDR_AUTH[@]}" \
-      -d @- | show_or_err
+PDF_BODY=$(jq -n \
+  --arg ns   "$NS" \
+  --arg slot "$SLOT" \
+  --arg url  "$PDF_URL" \
+  '{
+     ns: $ns, slot: $slot,
+     url: $url,
+     chunk: { chars: 1200, overlap: 150 }
+   }')
+post_json "/api/ingest/pdf" "$PDF_BODY" | jq '{ok, pages, chunks, textInserted, textUpdated}'
 
+# 3) ingest GitHub (малое окно)
 echo ">> ingest GitHub (openai/openai-cookbook, .md, limit 10)"
-jq -n --arg ns "$NS" --arg slot "$SLOT" '
-{
-  ns: $ns,
-  slot: $slot,
-  owner: "openai",
-  repo: "openai-cookbook",
-  ref: "main",
-  includeExt: [".md"],
-  cursor: 0,
-  limit: 10,
-  chunk: { chars: 1200, overlap: 150 }
-}
-' | curl -sS -X POST "$BASE/api/ingest/github" \
-      -H 'content-type: application/json' "${HDR_AUTH[@]}" \
-      -d @- | show_or_err
+GH_BODY=$(jq -n \
+  --arg ns   "$NS" \
+  --arg slot "$SLOT" \
+  '{
+     ns: $ns, slot: $slot,
+     owner: "openai", repo: "openai-cookbook",
+     includeExt: [".md"],
+     limit: 10,
+     chunk: { chars: 1200, overlap: 150 }
+   }')
+post_json "/api/ingest/github" "$GH_BODY" | jq '{ok, pageFiles, docs, textChunks, inserted, updated, nextCursor}'
 
+# 4) ANALYZE
 echo ">> ANALYZE chunks"
-psql_np -c "ANALYZE chunks;"
+psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -P pager=off -c "ANALYZE chunks;"
 
+# 5) сводка
 echo ">> summary:"
-psql_np -v ns="$NS" -f "$WEB_DIR/scripts/diag/count_ns.sql"
+psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -P pager=off -f "$WEB_DIR/scripts/diag/count_ns.sql"
diff --git a/apps/web/seed.json b/apps/web/seed.json
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/agents/rebecca.core.v1.json b/apps/web/seeds/agents/rebecca.core.v1.json
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/army/seed.json b/apps/web/seeds/army/seed.json
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/profiles/analyst.json b/apps/web/seeds/profiles/analyst.json
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/profiles/docs.json b/apps/web/seeds/profiles/docs.json
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/profiles/qa.json b/apps/web/seeds/profiles/qa.json
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/profiles/rag.json b/apps/web/seeds/profiles/rag.json
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/profiles/rebecca.profiles.v1.json b/apps/web/seeds/profiles/rebecca.profiles.v1.json
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/profiles/security.json b/apps/web/seeds/profiles/security.json
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/profiles/toolsmith.json b/apps/web/seeds/profiles/toolsmith.json
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/rebecca/01-architecture.md b/apps/web/seeds/rebecca/01-architecture.md
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/rebecca/02-rag-pipeline.md b/apps/web/seeds/rebecca/02-rag-pipeline.md
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/rebecca/03-prompts-style.md b/apps/web/seeds/rebecca/03-prompts-style.md
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/rebecca/04-kb-curation.md b/apps/web/seeds/rebecca/04-kb-curation.md
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/refs/agents/autogen.md b/apps/web/seeds/refs/agents/autogen.md
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/refs/agents/crewai.md b/apps/web/seeds/refs/agents/crewai.md
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/refs/agents/guardrails.md b/apps/web/seeds/refs/agents/guardrails.md
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/refs/agents/langgraph.md b/apps/web/seeds/refs/agents/langgraph.md
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/refs/agents/llamaindex.md b/apps/web/seeds/refs/agents/llamaindex.md
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/refs/agents/openai-agents.md b/apps/web/seeds/refs/agents/openai-agents.md
old mode 100644
new mode 100755
diff --git a/apps/web/seeds/refs/seed.json b/apps/web/seeds/refs/seed.json
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/admin/ingest/page.tsx b/apps/web/src/app/admin/ingest/page.tsx
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/admin/logs/page.tsx b/apps/web/src/app/admin/logs/page.tsx
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/admin/memory/page.tsx b/apps/web/src/app/admin/memory/page.tsx
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/admin/playground/page.tsx b/apps/web/src/app/admin/playground/page.tsx
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/admin/profiles/page.tsx b/apps/web/src/app/admin/profiles/page.tsx
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/admin/traces/page.tsx b/apps/web/src/app/admin/traces/page.tsx
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/_archive/20250914-235609/freya-initiative/route.ts b/apps/web/src/app/api/_archive/20250914-235609/freya-initiative/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/_archive/20250914-235609/memory-import/github/route.ts b/apps/web/src/app/api/_archive/20250914-235609/memory-import/github/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/_archive/20250914-235609/memory-import/plain/route.ts b/apps/web/src/app/api/_archive/20250914-235609/memory-import/plain/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/admin/echo/route.ts b/apps/web/src/app/api/admin/echo/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/admin/logs/list/route.ts b/apps/web/src/app/api/admin/logs/list/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/admin/sql/route.ts b/apps/web/src/app/api/admin/sql/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/admin/whoami/route.ts b/apps/web/src/app/api/admin/whoami/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/agents/save/route.ts b/apps/web/src/app/api/agents/save/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/debug/admin/route.ts b/apps/web/src/app/api/debug/admin/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/debug/logs/route.ts b/apps/web/src/app/api/debug/logs/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/dev/db/create-logs/route.ts b/apps/web/src/app/api/dev/db/create-logs/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/diag/chunks/route.ts b/apps/web/src/app/api/diag/chunks/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/diag/emb-ping/route.ts b/apps/web/src/app/api/diag/emb-ping/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/diag/gh-rate/route.ts b/apps/web/src/app/api/diag/gh-rate/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/diag/github/route.ts b/apps/web/src/app/api/diag/github/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/diag/llm/route.ts b/apps/web/src/app/api/diag/llm/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/diag/mem-stats/route.ts b/apps/web/src/app/api/diag/mem-stats/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/diag/wipe-ns/route.ts b/apps/web/src/app/api/diag/wipe-ns/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/evals/smoke/route.ts b/apps/web/src/app/api/evals/smoke/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/evals/trace/route.ts b/apps/web/src/app/api/evals/trace/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/evals/traces/export/route.ts b/apps/web/src/app/api/evals/traces/export/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/evals/traces/route.ts b/apps/web/src/app/api/evals/traces/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/health/db/route.ts b/apps/web/src/app/api/health/db/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/health/env/route.ts b/apps/web/src/app/api/health/env/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/ingest/pdf/route.ts b/apps/web/src/app/api/ingest/pdf/route.ts
index a52fedb..4390577 100644
--- a/apps/web/src/app/api/ingest/pdf/route.ts
+++ b/apps/web/src/app/api/ingest/pdf/route.ts
@@ -1,10 +1,7 @@
-// apps/web/src/app/api/ingest/pdf/route.ts
 import { NextResponse } from "next/server";
 import { embedMany } from "@/lib/embeddings";
-import { upsertMemoriesBatch } from "@/lib/memories";
+import { upsertChunks, type IngestDoc } from "@/lib/ingest_upsert";
 import { chunkText, normalizeChunkOpts } from "@/lib/chunking";
-import fs from "node:fs/promises";
-import path from "node:path";
 
 export const runtime = "nodejs";
 export const dynamic = "force-dynamic";
@@ -12,9 +9,10 @@ export const dynamic = "force-dynamic";
 type Body = {
   ns: string;
   url: string;
-  slot?: string | null;
+  slot?: "staging" | "prod" | string | null;
   kind?: string | null;
   chunk?: { chars?: number; overlap?: number };
+  maxFileBytes?: number | null;
 };
 
 function assertAdmin(req: Request) {
@@ -24,81 +22,129 @@ function assertAdmin(req: Request) {
   if (need && got !== need) throw new Error("unauthorized");
 }
 
-async function fetchPdfAsBuffer(url: string): Promise<Buffer> {
-  // Локальный путь для отладки: url = file:///abs/path/to/file.pdf
+async function importPdfParse(): Promise<(buf: Buffer) => Promise<any>> {
+  const mod: any = await import("pdf-parse");
+  const pdfParse = mod?.default ?? mod;
+  return (buf: Buffer) => pdfParse(buf);
+}
+
+async function fetchAsBuffer(url: string, maxBytes?: number): Promise<Buffer> {
   if (url.startsWith("file://")) {
-    const p = url.replace("file://", "");
-    const abs = path.isAbsolute(p) ? p : path.join(process.cwd(), p);
-    return await fs.readFile(abs);
+    const { readFile } = await import("node:fs/promises");
+    return readFile(url.slice("file://".length));
   }
-
-  // HTTP(S)
-  const res = await fetch(url, { redirect: "follow" });
-  if (!res.ok) {
-    throw new Error(`fetch failed: ${res.status} ${res.statusText}`);
+  const r = await fetch(url, { redirect: "follow" });
+  if (!r.ok) throw new Error(`fetch failed: ${r.status} ${r.statusText}`);
+  const reader = r.body?.getReader();
+  if (!reader) return Buffer.from(await r.arrayBuffer());
+  const parts: Uint8Array[] = [];
+  let total = 0, limit = Number(maxBytes) || Infinity;
+  while (true) {
+    const { done, value } = await reader.read();
+    if (done) break;
+    if (value) {
+      total += value.byteLength;
+      if (total > limit) throw new Error(`response too large (${total} > ${limit})`);
+      parts.push(value);
+    }
   }
-  const ab = await res.arrayBuffer();
-  return Buffer.from(ab);
+  return Buffer.concat(parts);
 }
 
-async function extractTextFromPdf(buf: Buffer): Promise<{ text: string; pages?: number }> {
-  // Импортируем напрямую lib-реализацию, минуя index.js с "debug mode"
-  const mod: any = await import("pdf-parse/lib/pdf-parse.js");
-  const pdfParse = mod?.default ?? mod; // совместимо с ESM/CJS
-  const out = await pdfParse(buf);
-  return { text: out.text || "", pages: out.numpages };
+async function fetchPdfViaJina(url: string): Promise<string> {
+  const enc = encodeURI(url).replace(/^https?:\/\//, "");
+  const jina = `https://r.jina.ai/https://${enc}`;
+  const r = await fetch(jina, { redirect: "follow" });
+  if (!r.ok) throw new Error(`Jina ${r.status} ${r.statusText}`);
+  return await r.text();
 }
 
 export async function POST(req: Request) {
   const t0 = Date.now();
+  let stage: string = "init";
   try {
     assertAdmin(req);
-    const { ns, url, slot = "staging", kind = "pdf", chunk } = (await req.json()) as Body;
+    const body = (await req.json()) as Body;
+
+    const ns   = (body.ns || "").trim();
+    const url  = (body.url || "").trim();
+    const slot = ((body.slot || "staging") as "staging" | "prod");
+    const kind = (body.kind || "pdf");
+    const opts = normalizeChunkOpts(body.chunk);
+    const MAXB = Number.isFinite(Number(body.maxFileBytes)) ? Math.max(50_000, Number(body.maxFileBytes)) : undefined;
+
     if (!ns || !url) {
-      return NextResponse.json({ ok: false, error: "ns and url are required" }, { status: 400 });
+      return NextResponse.json({ ok: false, stage, error: "ns and url are required" }, { status: 400 });
+    }
+    if (!["staging","prod"].includes(slot)) {
+      return NextResponse.json({ ok: false, stage, error: "slot must be 'staging'|'prod'" }, { status: 400 });
     }
 
-    const buf = await fetchPdfAsBuffer(url);
-    const { text, pages } = await extractTextFromPdf(buf);
-    if (!text?.trim()) throw new Error("empty text extracted from PDF");
+    stage = "download";
+    let text = "";
+    let pages: number | undefined;
 
-    const opts = normalizeChunkOpts(chunk);
-    const chunks = chunkText(text, opts);
-    if (!chunks.length) throw new Error("no chunks produced");
+    try {
+      const buf = await fetchAsBuffer(url, MAXB);
+      const pdfParse = await importPdfParse();
+      stage = "pdf-parse";
+      const out = await pdfParse(buf);
+      text  = (out?.text || "").trim();
+      pages = out?.numpages;
+    } catch {
+      // сетевой fallback (alphaxiv и пр.)
+      stage = "fallback-jina";
+      text = (await fetchPdfViaJina(url)).trim();
+    }
+
+    if (!text) throw new Error("empty text extracted from PDF");
 
-    const vectors = await embedMany(chunks);
+    stage = "chunk";
+    const parts = chunkText(text, opts);
+    if (!parts.length) throw new Error("no chunks produced");
 
-    const records = chunks.map((content, i) => ({
-      kind: kind || "pdf",
+    stage = "db";
+    const doc: IngestDoc = {
       ns,
       slot,
-      content,
-      embedding: vectors[i],
-      metadata: {
+      source_id: url,
+      url,
+      title: null,
+      published_at: null,
+      source_type: "pdf",
+      kind,
+      doc_metadata: {
         source_type: "pdf",
         url,
-        page_count: pages,
-        chunk_index: i,
-        chunk_chars: content.length,
+        page_count: pages ?? null,
         chunk: opts,
+        chunk_total: parts.length,
       },
-    }));
+      chunks: parts.map((content, i) => ({
+        content,
+        chunk_no: i,
+        metadata: {
+          source_type: "pdf",
+          url,
+          page_count: pages ?? null,
+          chunk: opts,
+          chunk_chars: content.length,
+        },
+      })),
+    };
+
+    // upsert
+    await upsertChunks([doc]);
 
-    const { written, ids } = await upsertMemoriesBatch(records);
     return NextResponse.json({
-      ok: true,
-      ns,
-      slot,
-      url,
-      pages,
-      chunks: chunks.length,
-      written,
-      ids,
+      ok: true, ns, slot, url,
+      pages: pages ?? null,
+      chunks: parts.length,
       ms: Date.now() - t0,
     });
   } catch (e: any) {
     return NextResponse.json(
-      { ok: false, stage: "extract", error: e?.message || String(e) },
+      { ok: false, stage, error: e?.message || String(e) },
       { status: 500 }
     );
   }
diff --git a/apps/web/src/app/api/ingest/url/route.ts b/apps/web/src/app/api/ingest/url/route.ts
index 51d148a..aa599ea 100644
--- a/apps/web/src/app/api/ingest/url/route.ts
+++ b/apps/web/src/app/api/ingest/url/route.ts
@@ -1,17 +1,15 @@
-// apps/web/src/app/api/ingest/url/route.ts
 import { NextResponse } from "next/server";
-import { embedMany } from "@/lib/embeddings";
-import { upsertMemoriesBatch } from "@/lib/memories";
 import { chunkText, normalizeChunkOpts } from "@/lib/chunking";
+import { upsertChunks, type IngestDoc } from "@/lib/ingest_upsert";
 
 export const runtime = "nodejs";
 export const dynamic = "force-dynamic";
 
 type Body = {
   ns: string;
-  url: string;
-  slot?: string | null;
-  kind?: string | null;
+  slot?: "staging" | "prod" | string | null;
+  kind?: string | null;                 // "url" по умолчанию
+  urls: string[];
   chunk?: { chars?: number; overlap?: number };
 };
 
@@ -25,7 +23,19 @@ function assertAdmin(req: Request) {
 const UA =
   "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120 Safari/537.36";
 
-function stripTags(html: string): string {
+async function fetchTextOrPdf(url: string): Promise<{ type: "text" | "pdf"; text?: string; buf?: Buffer; ctype?: string }> {
+  const r = await fetch(url, { redirect: "follow", headers: { "User-Agent": UA, Accept: "*/*" } });
+  if (!r.ok) throw new Error(`GET ${url} -> ${r.status} ${r.statusText}`);
+  const ct = r.headers.get("content-type") || "";
+  if (ct.includes("application/pdf") || url.toLowerCase().endsWith(".pdf")) {
+    const ab = await r.arrayBuffer();
+    return { type: "pdf", buf: Buffer.from(ab), ctype: ct };
+  }
+  return { type: "text", text: await r.text(), ctype: ct };
+}
+
+// очень простой «выколачиватель» текста из HTML (нам хватает)
+function htmlToText(html: string): string {
   return html
     .replace(/<script[\s\S]*?<\/script>/gi, " ")
     .replace(/<style[\s\S]*?<\/style>/gi, " ")
@@ -36,61 +46,130 @@ function stripTags(html: string): string {
 
 export async function POST(req: Request) {
   const t0 = Date.now();
+  let stage: string | null = null;
   try {
     assertAdmin(req);
-    const { ns, url, slot = "staging", kind = "url", chunk } = (await req.json()) as Body;
-    if (!ns || !url) {
-      return NextResponse.json({ ok: false, error: "ns and url are required" }, { status: 400 });
+    stage = "init";
+    const body = (await req.json()) as Body;
+
+    const ns   = (body.ns || "").trim();
+    const slot = ((body.slot || "staging") as "staging" | "prod");
+    const kind = (body.kind || "url");
+    const urls = Array.isArray(body.urls) ? body.urls.filter(Boolean) : [];
+    const opts = normalizeChunkOpts(body.chunk);
+
+    if (!ns || !urls.length) {
+      return NextResponse.json({ ok: false, error: "ns and urls are required" }, { status: 400 });
+    }
+    if (!["staging", "prod"].includes(slot)) {
+      return NextResponse.json({ ok: false, error: "slot must be 'staging'|'prod'" }, { status: 400 });
     }
 
-    const res = await fetch(url, {
-      redirect: "follow",
-      headers: {
-        "User-Agent": UA,
-        Accept: "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
-        "Accept-Language": "en-US,en;q=0.9,ru;q=0.8",
-      },
-    });
-    if (!res.ok) {
-      const body = await res.text().catch(() => "");
-      throw new Error(`fetch failed: ${res.status} ${res.statusText} ${body.slice(0, 200)}`);
+    let textInserted = 0;
+    let textUpdated  = 0;
+    let textChunks   = 0;
+
+    // соберём документы, а PDF — делегируем в /api/ingest/pdf
+    const docs: IngestDoc[] = [];
+    const pdfQueue: { url: string }[] = [];
+
+    stage = "fetch";
+    for (const url of urls) {
+      try {
+        const res = await fetchTextOrPdf(url);
+        if (res.type === "pdf") {
+          pdfQueue.push({ url });
+          continue;
+        }
+        const txt = htmlToText(res.text || "");
+        if (!txt) continue;
+
+        const parts = chunkText(txt, opts);
+        textChunks += parts.length;
+
+        const doc: IngestDoc = {
+          ns,
+          slot,
+          source_id: url,              // единая политика: source_id = URL
+          url,
+          title: null,
+          published_at: null,
+          source_type: "url",
+          kind,
+          doc_metadata: {
+            source_type: "url",
+            url,
+            chunk: opts,
+            chunk_total: parts.length,
+          },
+          chunks: parts.map((content, i) => ({
+            content,
+            chunk_no: i,
+            metadata: {
+              source_type: "url",
+              url,
+              chunk: opts,
+              chunk_chars: content.length,
+            },
+          })),
+        };
+        docs.push(doc);
+      } catch (e) {
+        // копим ошибки на сторону клиента
+        console.warn("ingest/url: failed", url, String(e));
+      }
+    }
+
+    stage = "db";
+    if (docs.length) {
+      const r = await upsertChunks(docs);
+      textInserted += r.inserted;
+      textUpdated  += r.updated;
+    }
+
+    // PDF делегируем (последовательно — чтобы не спамить)
+    stage = "delegate-pdf";
+    let pdfDelegated = 0;
+    let pdfStats = { chunks: 0, written: 0 };
+    for (const p of pdfQueue) {
+      pdfDelegated++;
+      try {
+        const resp = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || ""}/api/ingest/pdf`, {
+          method: "POST",
+          headers: {
+            "content-type": "application/json",
+            "x-admin-key": req.headers.get("x-admin-key") || "",
+          },
+          body: JSON.stringify({ ns, slot, url: p.url, kind: "pdf", chunk: opts }),
+        });
+        // мы не проваливаемся по ошибке; просто статистика
+        const j = await resp.json().catch(() => ({}));
+        if (j?.chunks) pdfStats.chunks += Number(j.chunks) || 0;
+        if (j?.textInserted) pdfStats.written += Number(j.textInserted) || 0;
+      } catch (e) {
+        console.warn("delegate pdf failed:", p.url, String(e));
+      }
     }
-    const ct = (res.headers.get("content-type") || "").toLowerCase();
-    const raw = await res.text();
-    const text = ct.includes("html") ? stripTags(raw) : raw;
-    if (!text?.trim()) throw new Error("empty text extracted");
-
-    const opts = normalizeChunkOpts(chunk);
-    const chunks = chunkText(text, opts);
-    const vectors = await embedMany(chunks);
-
-    const records = chunks.map((content, i) => ({
-      kind: kind || "url",
-      ns,
-      slot,
-      content,
-      embedding: vectors[i],
-      metadata: {
-        source_type: "url",
-        url,
-        content_type: ct,
-        chunk_index: i,
-        chunk_chars: content.length,
-        chunk: opts,
-      },
-    }));
-    const written: number = await upsertMemoriesBatch(records);
 
     return NextResponse.json({
       ok: true,
-      ns,
-      slot,
-      url,
-      chunks: chunks.length,
-      written,
-           ms: Date.now() - t0,
+      ns, slot, urls,
+      pdfDelegated,
+      pdfStats,
+      textChunks,
+      textInserted,
+      textUpdated,
+      failures: [],
+      ms: Date.now() - t0,
     });
   } catch (e: any) {
-    return NextResponse.json({ ok: false, error: e?.message || String(e) }, { status: 500 });
+    return NextResponse.json(
+      { ok: false, stage, error: e?.message || String(e) },
+      { status: 500 }
+    );
   }
 }
+
+export function GET() {
+  return NextResponse.json({ error: "Method Not Allowed" }, { status: 405 });
+}
diff --git a/apps/web/src/app/api/ingest/youtube/route.ts b/apps/web/src/app/api/ingest/youtube/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/initiatives/recent/route.ts b/apps/web/src/app/api/initiatives/recent/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/logs/list/route.ts b/apps/web/src/app/api/logs/list/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/memory/delete/route.ts b/apps/web/src/app/api/memory/delete/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/memory/ingest/route.ts b/apps/web/src/app/api/memory/ingest/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/memory/list/route.ts b/apps/web/src/app/api/memory/list/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/memory/promote/route.ts b/apps/web/src/app/api/memory/promote/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/memory/route.ts b/apps/web/src/app/api/memory/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/memory/search/route.ts b/apps/web/src/app/api/memory/search/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/memory/suggest-ns/route.ts b/apps/web/src/app/api/memory/suggest-ns/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/memory/upsert/route.ts b/apps/web/src/app/api/memory/upsert/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/ns/route.ts b/apps/web/src/app/api/ns/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/profiles/delete/route.ts b/apps/web/src/app/api/profiles/delete/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/profiles/get/route.ts b/apps/web/src/app/api/profiles/get/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/profiles/save/route.ts b/apps/web/src/app/api/profiles/save/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/rag/answer-guarded/route.ts b/apps/web/src/app/api/rag/answer-guarded/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/rag/answer-logged-guarded/route.ts b/apps/web/src/app/api/rag/answer-logged-guarded/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/rag/answer-logged/route.ts b/apps/web/src/app/api/rag/answer-logged/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/rag/answer/route.ts b/apps/web/src/app/api/rag/answer/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/rag/ask-guarded/route.ts b/apps/web/src/app/api/rag/ask-guarded/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/rag/ask/route.ts b/apps/web/src/app/api/rag/ask/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/rebecca/execute/route.ts b/apps/web/src/app/api/rebecca/execute/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/api/retrieve/route.ts b/apps/web/src/app/api/retrieve/route.ts
index 686ca44..4a24270 100644
--- a/apps/web/src/app/api/retrieve/route.ts
+++ b/apps/web/src/app/api/retrieve/route.ts
@@ -1,107 +1,66 @@
 // apps/web/src/app/api/retrieve/route.ts
 import { NextResponse } from "next/server";
-import { retrieveV2, type RecencyOptions } from "@/lib/retriever_v2";
+import { retrieveV2 } from "@/lib/retriever_v2";
+import type {
+  RetrieveRequest,
+  RetrieveResponse,
+  NsMode,
+} from "@/lib/retrieval-contract";
 
 export const runtime = "nodejs";
 export const dynamic = "force-dynamic";
 
 type Body = {
+  q: string;
   ns: string;
-  slot?: string | null;
-  query: string;
-
+  slot?: "staging" | "prod" | string | null;
   topK?: number;
   candidateK?: number;
-
-  nsMode?: "strict" | "prefix";
-  includeKinds?: string[] | null;
-  includeSourceTypes?: string[] | null;
-
   minSimilarity?: number;
-
-  recency?: RecencyOptions | null;
-
-  // ➜ добавили доменный фильтр в контракт
-  domainFilter?: {
-    allow?: string[];
-    deny?: string[];
-  } | null;
+  nsMode?: NsMode;
+  domainFilter?: { allow?: string[]; deny?: string[] } | null;
 };
 
 export async function POST(req: Request) {
-  const t0 = Date.now();
-  let stage = "init";
   try {
-    stage = "parse";
-    const body = (await req.json()) as Body;
-
-    if (!body?.ns) {
-      return NextResponse.json({ ok: false, error: "ns required" }, { status: 400 });
-    }
-    if (!body?.query?.trim()) {
-      return NextResponse.json({ ok: false, error: "query required" }, { status: 400 });
+    const b = (await req.json()) as Body;
+
+    // обязательные поля
+    if (!b?.q || !b?.ns) {
+      return NextResponse.json(
+        { error: "q and ns are required" },
+        { status: 400 }
+      );
     }
 
-    // Жёсткое приведение типов чисел (часто прилетает как string/null/undefined)
-    const topK =
-      typeof body.topK === "number" && Number.isFinite(body.topK)
-        ? Math.max(1, Math.floor(body.topK))
-        : 5;
-
-    const candidateK =
-      typeof body.candidateK === "number" && Number.isFinite(body.candidateK)
-        ? Math.max(topK, Math.floor(body.candidateK))
-        : 200;
-
-    const minSimilarity =
-      typeof body.minSimilarity === "number" && Number.isFinite(body.minSimilarity)
-        ? body.minSimilarity
-        : undefined;
-
-    // Корректно пробрасываем domainFilter (если массивы пустые — тоже пробрасываем)
-    const domainFilter =
-      body.domainFilter && typeof body.domainFilter === "object"
-        ? {
-            allow: Array.isArray(body.domainFilter.allow) ? body.domainFilter.allow : undefined,
-            deny: Array.isArray(body.domainFilter.deny) ? body.domainFilter.deny : undefined,
-          }
-        : null;
-
-    // Recency по умолчанию
-    const recency: RecencyOptions =
-      body.recency && typeof body.recency === "object"
-        ? {
-            enabled: body.recency.enabled ?? true,
-            halfLifeDays: body.recency.halfLifeDays ?? 30,
-            weight: body.recency.weight ?? 0.2,
-            usePublishedAt: body.recency.usePublishedAt ?? false,
-          }
-        : { enabled: true, halfLifeDays: 30, weight: 0.2, usePublishedAt: false };
-
-    stage = "retrieve";
-    const result = await retrieveV2({
-      ns: body.ns,
-      slot: body.slot ?? "staging",
-      query: body.query,
-      topK,                    // ✅ теперь точно topK
-      candidateK,              // ✅ и candidateK
-      nsMode: body.nsMode ?? "strict",
-      includeKinds: body.includeKinds ?? null,
-      includeSourceTypes: body.includeSourceTypes ?? null,
-      minSimilarity,           // может быть undefined
-      recency,
-      domainFilter,            // ✅ пробрасываем фильтр доменов
-    });
-
-    // Небольшой маячок, помогает в отладке энд-ту-энд
-    return NextResponse.json(
-      { ok: true, ...result, took_ms_route: Date.now() - t0, routeVersion: "retrieve-route-v2.1" },
-      { status: 200 },
-    );
+    // нормализация
+    const slot = (b.slot === "prod" ? "prod" : "staging") as "staging" | "prod";
+    const topK = Math.max(1, Math.min(Number(b.topK ?? 5), 50));
+    const candidateK = Math.max(topK, Math.min(Number(b.candidateK ?? 200), 1000));
+    const minSimilarity = Math.max(0, Math.min(Number(b.minSimilarity ?? 0), 1));
+    const nsMode: NsMode = b.nsMode === "strict" ? "strict" : "prefix";
+
+    const body: RetrieveRequest = {
+      q: String(b.q),
+      ns: String(b.ns),
+      slot,
+      topK,
+      candidateK,
+      minSimilarity,
+      nsMode,
+      domainFilter: b.domainFilter ?? null,
+    };
+
+    const out: RetrieveResponse = await retrieveV2(body);
+    return NextResponse.json(out, { status: 200 });
   } catch (e: any) {
     return NextResponse.json(
-      { ok: false, stage, error: e?.message || String(e) },
-      { status: 500 },
+      { error: e?.message || String(e) },
+      { status: 500 }
     );
   }
 }
+
+export function GET() {
+  return NextResponse.json({ error: "Method Not Allowed" }, { status: 405 });
+}
diff --git a/apps/web/src/app/api/schema/columns/route.ts b/apps/web/src/app/api/schema/columns/route.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/chat/page.tsx b/apps/web/src/app/chat/page.tsx
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/favicon.ico b/apps/web/src/app/favicon.ico
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/globals.css b/apps/web/src/app/globals.css
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/icon.svg b/apps/web/src/app/icon.svg
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/layout.tsx b/apps/web/src/app/layout.tsx
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/page.module.css b/apps/web/src/app/page.module.css
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/page.tsx b/apps/web/src/app/page.tsx
old mode 100644
new mode 100755
diff --git a/apps/web/src/app/playground/page.tsx b/apps/web/src/app/playground/page.tsx
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/admin-auth.ts b/apps/web/src/lib/admin-auth.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/admin-guard.ts b/apps/web/src/lib/admin-guard.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/adminAuth.ts b/apps/web/src/lib/adminAuth.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/auth.ts b/apps/web/src/lib/auth.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/chunk.ts b/apps/web/src/lib/chunk.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/chunking.ts b/apps/web/src/lib/chunking.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/contracts.ts b/apps/web/src/lib/contracts.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/db.ts b/apps/web/src/lib/db.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/domain_filter.ts b/apps/web/src/lib/domain_filter.ts
new file mode 100644
index 0000000..933cd59
--- /dev/null
+++ b/apps/web/src/lib/domain_filter.ts
@@ -0,0 +1,20 @@
+// apps/web/src/lib/domain_filter.ts
+import type { DomainFilter } from "./retrieval-contract";
+
+export function matchesDomain(url: string, f?: DomainFilter): boolean {
+  if (!f) return true;
+  const allow = f.allow ?? [];
+  const deny  = f.deny  ?? [];
+
+  // deny сильнее allow
+  for (const d of deny) {
+    if (!d) continue;
+    if (url.includes(d)) return false;
+  }
+  if (allow.length === 0) return true;
+  for (const a of allow) {
+    if (!a) continue;
+    if (url.includes(a)) return true;
+  }
+  return false;
+}
diff --git a/apps/web/src/lib/embeddings.ts b/apps/web/src/lib/embeddings.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/env.ts b/apps/web/src/lib/env.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/guardrails.ts b/apps/web/src/lib/guardrails.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/hash.ts b/apps/web/src/lib/hash.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/ingest_upsert.ts b/apps/web/src/lib/ingest_upsert.ts
new file mode 100644
index 0000000..7948caf
--- /dev/null
+++ b/apps/web/src/lib/ingest_upsert.ts
@@ -0,0 +1,215 @@
+// apps/web/src/lib/ingest_upsert.ts
+import { pool } from "@/lib/pg";
+import { createHash } from "crypto";
+import { embedQuery } from "@/lib/embeddings"; // одна и та же модель для query/passage — ок для cosine
+
+export type IngestChunk = {
+  content: string;
+  chunk_no: number;                  // 0..N-1 (стабильная нумерация)
+  metadata?: Record<string, any>;
+};
+
+export type IngestDoc = {
+  ns: string;                        // например: "rebecca/army/refs"
+  slot: "staging" | "prod";
+  source_id: string;                 // URL | file:<sha256> | gh:<owner>/<repo>@<ref>:<path>
+  url?: string | null;
+  title?: string | null;
+  published_at?: string | null;      // ISO или null
+  source_type?: string | null;       // "url" | "pdf" | "github" | ...
+  kind?: string | null;              // "doc" | "section" | ...
+  chunks: IngestChunk[];
+  doc_metadata?: Record<string, any>;
+};
+
+/** SHA-256 в hex от текста */
+const hashText = (t: string) => createHash("sha256").update(t).digest("hex");
+
+/** простая параллельная обёртка над embedQuery */
+async function embedMany(texts: string[], concurrency = 8): Promise<number[][]> {
+  const out: number[][] = new Array(texts.length);
+  let i = 0;
+  const worker = async () => {
+    while (true) {
+      const idx = i++;
+      if (idx >= texts.length) break;
+      out[idx] = await embedQuery(texts[idx]);
+    }
+  };
+  await Promise.all(Array.from({ length: Math.min(concurrency, texts.length) }, worker));
+  return out;
+}
+
+/** минимальная нормализация строк */
+const sanitize = (s: unknown, max = 10_000): string | null => {
+  if (typeof s !== "string") return null;
+  const t = s.replace(/\u0000/g, "").trim();
+  if (!t) return null;
+  return t.length > max ? t.slice(0, max) : t;
+};
+
+/** быстрая проверка размерности векторной колонки */
+const EXPECTED_DIM = 1536; // держим в синхроне с schema: vector(1536)
+
+export async function upsertChunks(docs: IngestDoc[]) {
+  if (!docs.length) return { inserted: 0, updated: 0, total: 0 };
+
+  // 0) валидация входа (раньше, чтобы падать до эмбеддингов)
+  for (const d of docs) {
+    if (!d.ns?.trim()) throw new Error("upsertChunks: ns is required");
+    if (d.slot !== "staging" && d.slot !== "prod") {
+      throw new Error(`upsertChunks: slot must be 'staging'|'prod', got '${d.slot}'`);
+    }
+    if (!d.source_id?.trim()) throw new Error("upsertChunks: source_id is required");
+    if (!Array.isArray(d.chunks) || d.chunks.length === 0) {
+      throw new Error(`upsertChunks: empty chunks for source_id=${d.source_id}`);
+    }
+  }
+
+  // 1) готовим плоскую вставку: фильтруем пустые/очевидный мусор
+  const flat: Array<{
+    ns: string;
+    slot: "staging" | "prod";
+    content: string;
+    url: string | null;
+    title: string | null;
+    snippet: string | null;
+    published_at: string | null;
+    source_type: string | null;
+    kind: string | null;
+    metadata: Record<string, any>;
+    content_hash: string;
+    source_id: string;
+    chunk_no: number;
+  }> = [];
+
+  for (const d of docs) {
+    const commonMeta = d.doc_metadata || {};
+    for (const ch of d.chunks) {
+      // чистим контент; отбрасываем совсем мелочь (< 5 символов после trim)
+      const content = sanitize(ch.content, 50_000);
+      if (!content || content.length < 5) continue;
+
+      const snippet = content.slice(0, 300);
+      flat.push({
+        ns: d.ns.trim(),
+        slot: d.slot,
+        content,
+        url: sanitize(d.url || null, 2048),
+        title: sanitize(d.title || null, 512),
+        snippet,
+        published_at: d.published_at || null,
+        source_type: d.source_type || null,
+        kind: d.kind || null,
+        metadata: { ...commonMeta, ...(ch.metadata || {}) },
+        content_hash: hashText(content),
+        source_id: d.source_id,
+        chunk_no: ch.chunk_no,
+      });
+    }
+  }
+
+  if (!flat.length) return { inserted: 0, updated: 0, total: 0 };
+
+  // 2) эмбеддинги (однотипная модель норм для cosine)
+  const embeddings = await embedMany(flat.map(f => f.content));
+
+  // 3) контрольная проверка размерности (ловим рассинхрон с vector(N))
+  if (embeddings.length !== flat.length) {
+    throw new Error(`upsertChunks: embeddings count mismatch: got ${embeddings.length}, expected ${flat.length}`);
+  }
+  const firstBad = embeddings.findIndex(v => !Array.isArray(v) || v.length !== EXPECTED_DIM);
+  if (firstBad >= 0) {
+    throw new Error(`upsertChunks: embedding dim != ${EXPECTED_DIM} at index ${firstBad} (len=${embeddings[firstBad]?.length})`);
+  }
+
+  const client = await pool.connect();
+  try {
+    await client.query("BEGIN");
+    await client.query("SET LOCAL statement_timeout = 0");
+    await client.query("SET LOCAL application_name = 'ingest_upsert'");
+
+    let inserted = 0, updated = 0;
+
+    // 4) батчевой UPSERT
+    const BATCH = 500;
+    for (let off = 0; off < flat.length; off += BATCH) {
+      const slice = flat.slice(off, off + BATCH);
+      const vecs  = embeddings.slice(off, off + BATCH).map(v => `[${v.join(",")}]`);
+
+      // 13 параметров на строку (embedding как литерал ::vector — быстрее и проще, чем массив параметров)
+      const rowsSql: string[] = [];
+      const params: any[] = [];
+      slice.forEach((r, i) => {
+        const base = i * 13;
+        rowsSql.push(`(
+          $${base + 1}::text,          -- ns
+          $${base + 2}::text,          -- slot
+          $${base + 3}::text,          -- content
+          ${vecs[i]}::vector,          -- embedding
+          $${base + 4}::text,          -- url
+          $${base + 5}::text,          -- title
+          $${base + 6}::text,          -- snippet
+          $${base + 7}::timestamptz,   -- published_at
+          $${base + 8}::text,          -- source_type
+          $${base + 9}::text,          -- kind
+          $${base +10}::jsonb,         -- metadata
+          $${base +11}::text,          -- content_hash
+          $${base +12}::text,          -- source_id
+          $${base +13}::int            -- chunk_no
+        )`);
+        params.push(
+          r.ns,
+          r.slot,
+          r.content,
+          r.url,
+          r.title,
+          r.snippet,
+          r.published_at,
+          r.source_type,
+          r.kind,
+          JSON.stringify(r.metadata ?? {}),
+          r.content_hash,
+          r.source_id,
+          r.chunk_no,
+        );
+      });
+
+      const sql = `
+        INSERT INTO chunks
+          (ns, slot, content, embedding, url, title, snippet, published_at,
+           source_type, kind, metadata, content_hash, source_id, chunk_no)
+        VALUES ${rowsSql.join(",\n")}
+        ON CONFLICT (ns, slot, COALESCE(source_id,''), chunk_no)
+        DO UPDATE SET
+          content       = EXCLUDED.content,
+          embedding     = EXCLUDED.embedding,
+          url           = EXCLUDED.url,
+          title         = EXCLUDED.title,
+          snippet       = EXCLUDED.snippet,
+          published_at  = EXCLUDED.published_at,
+          source_type   = EXCLUDED.source_type,
+          kind          = EXCLUDED.kind,
+          metadata      = EXCLUDED.metadata,
+          content_hash  = EXCLUDED.content_hash,
+          updated_at    = now()
+        WHERE chunks.content_hash IS DISTINCT FROM EXCLUDED.content_hash
+        RETURNING (xmax = 0) AS inserted_flag;
+      `;
+
+      const res = await client.query<{ inserted_flag: boolean }>(sql, params);
+      for (const row of res.rows) {
+        if (row.inserted_flag) inserted++; else updated++;
+      }
+    }
+
+    await client.query("COMMIT");
+    return { inserted, updated, total: flat.length };
+  } catch (e: any) {
+    await client.query("ROLLBACK");
+    const msg = e?.message || String(e);
+    throw new Error(`upsertChunks failed: ${msg}`);
+  } finally {
+    client.release();
+  }
+}
diff --git a/apps/web/src/lib/log.ts b/apps/web/src/lib/log.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/logs.ts b/apps/web/src/lib/logs.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/namespaces.ts b/apps/web/src/lib/namespaces.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/ns.ts b/apps/web/src/lib/ns.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/profile-runtime.ts b/apps/web/src/lib/profile-runtime.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/profiles.ts b/apps/web/src/lib/profiles.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/rag-core.ts b/apps/web/src/lib/rag-core.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/rate_limit.ts b/apps/web/src/lib/rate_limit.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/recency.ts b/apps/web/src/lib/recency.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/redact.ts b/apps/web/src/lib/redact.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/retrieval-contract.ts b/apps/web/src/lib/retrieval-contract.ts
new file mode 100644
index 0000000..68e6506
--- /dev/null
+++ b/apps/web/src/lib/retrieval-contract.ts
@@ -0,0 +1,43 @@
+// apps/web/src/lib/retrieval-contract.ts
+export type Slot = "staging" | "prod";
+
+export type RecencyOptions = {
+  alpha?: number;   // экзп. затухание, 0..1
+  beta?: number;    // бонус свежести, 0..1
+  halfLifeDays?: number; // полураспад
+};
+
+export type DomainFilter = {
+  allow?: string[];  // белый список: подстроки/доменные куски
+  deny?: string[];   // чёрный список
+};
+
+export type RetrieveRequest = {
+  ns: string;
+  slot: Slot;
+  q: string;                // текст запроса
+  topK?: number;
+  candidateK?: number;
+  minSimilarity?: number;
+  nsMode?: "strict" | "prefix";
+  recency?: RecencyOptions;
+  domainFilter?: DomainFilter; // можно опустить
+  debugVersion?: "rc-v1";
+};
+
+export type RetrieveItem = {
+  id: string;
+  url: string | null;
+  title: string | null;
+  snippet: string | null;
+  score: number;            // итоговый (после пересчётов)
+  similarity: number;       // сырая косинусная близость
+  published_at: string | null;
+  source_type: string | null;
+  kind: string | null;
+};
+
+export type RetrieveResponse = {
+  items: RetrieveItem[];
+  debugVersion: "rc-v1";
+};
diff --git a/apps/web/src/lib/retriever.ts b/apps/web/src/lib/retriever.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/retriever_v2.backup.ts b/apps/web/src/lib/retriever_v2.backup.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/retriever_v2.ts b/apps/web/src/lib/retriever_v2.ts
index 3e96f44..6c8c128 100644
--- a/apps/web/src/lib/retriever_v2.ts
+++ b/apps/web/src/lib/retriever_v2.ts
@@ -6,8 +6,8 @@ import {
   RetrieveResponse,
   RetrieveItem,
   clamp,
-  matchesDomain,
 } from "@/lib/retrieval-contract";
+import { matchesDomain } from "@/lib/domain_filter";
 
 const ALPHA = Number(process.env.RETRIEVE_ALPHA ?? 0.85);
 const BETA = Number(process.env.RETRIEVE_BETA ?? 0.15);
diff --git a/apps/web/src/lib/schemas/agent.ts b/apps/web/src/lib/schemas/agent.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/similarity.ts b/apps/web/src/lib/similarity.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/lib/suggestNs.ts b/apps/web/src/lib/suggestNs.ts
old mode 100644
new mode 100755
diff --git a/apps/web/src/types/ambient.d.ts b/apps/web/src/types/ambient.d.ts
new file mode 100644
index 0000000..fe2933f
--- /dev/null
+++ b/apps/web/src/types/ambient.d.ts
@@ -0,0 +1,12 @@
+// apps/web/src/types/ambient.d.ts
+declare module "pdf-parse";
+declare module "pdf-parse/lib/pdf-parse.js";
+
+// Если по-прежнему не хочешь тянуть @types/pg, можно оставить и это:
+declare module "pg" {
+  export class Pool {
+    constructor(config?: any);
+    query: (text: string, params?: any[]) => Promise<any>;
+    end: () => Promise<void>;
+  }
+}
diff --git a/apps/web/tests/Smoke-Evals.ps1 b/apps/web/tests/Smoke-Evals.ps1
old mode 100644
new mode 100755
diff --git a/apps/web/tests/golden.json b/apps/web/tests/golden.json
old mode 100644
new mode 100755
diff --git a/apps/web/traces.csv b/apps/web/traces.csv
old mode 100644
new mode 100755
diff --git a/apps/web/tsconfig.backup.json b/apps/web/tsconfig.backup.json
old mode 100644
new mode 100755
diff --git a/apps/web/tsconfig.json b/apps/web/tsconfig.json
old mode 100644
new mode 100755
index 7ea1639..7169dd6
--- a/apps/web/tsconfig.json
+++ b/apps/web/tsconfig.json
@@ -1,41 +1,37 @@
 {
   "compilerOptions": {
-    "target": "ES2017",
-    "lib": [
-      "dom",
-      "dom.iterable",
-      "esnext"
-    ],
-    "allowJs": true,
-    "skipLibCheck": true,
+    "target": "ES2022",
+    "lib": ["dom", "dom.iterable", "esnext"],
+    "module": "ESNext",
+    "moduleResolution": "bundler",
     "strict": true,
     "noEmit": true,
+    "allowJs": true,
+    "skipLibCheck": true,
     "esModuleInterop": true,
-    "module": "esnext",
-    "moduleResolution": "bundler",
     "resolveJsonModule": true,
     "isolatedModules": true,
     "jsx": "preserve",
     "incremental": true,
-    "plugins": [
-      {
-        "name": "next"
-      }
-    ],
     "baseUrl": ".",
     "paths": {
-      "@/*": [
-        "src/*"
-      ]
-    }
+      "@/*": ["./src/*"],
+      "@lib/*": ["./src/lib/*"]
+    },
+    "plugins": [{ "name": "next" }]
   },
   "include": [
     "next-env.d.ts",
-    "**/*.ts",
-    "**/*.tsx",
+    "src/**/*.ts",
+    "src/**/*.tsx",
     ".next/types/**/*.ts"
   ],
   "exclude": [
-    "node_modules"
+    "node_modules",
+    "scripts",                         // apps/web/scripts/** (не нужно tsc)
+    "src/app/api/_archive/**",         // исторические ручки
+    "src/app/api/rag/**",              // старые RAG ручки
+    "src/app/api/memory/**",           // старые memories ручки
+    "src/lib/rag-core.ts"              // старое ядро RAG (не используется)
   ]
 }
diff --git a/docs/CHANGELOG.md b/docs/CHANGELOG.md
old mode 100644
new mode 100755
diff --git a/env-check.ps1 b/env-check.ps1
old mode 100644
new mode 100755
diff --git a/package-lock.json b/package-lock.json
index 803dece..b7821e9 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -20,6 +20,7 @@
         "jsdom": "^26.1.0",
         "next": "15.4.6",
         "openai": "^5.13.1",
+        "pdf-parse": "^1.1.1",
         "pg": "^8.16.3",
         "react": "19.1.0",
         "react-dom": "19.1.0",
@@ -29,6 +30,7 @@
       "devDependencies": {
         "@eslint/eslintrc": "^3",
         "@types/node": "^20",
+        "@types/pg": "^8.15.5",
         "@types/react": "^19",
         "@types/react-dom": "^19",
         "eslint": "^9",
@@ -1096,6 +1098,18 @@
         "undici-types": "~6.21.0"
       }
     },
+    "node_modules/@types/pg": {
+      "version": "8.15.5",
+      "resolved": "https://registry.npmjs.org/@types/pg/-/pg-8.15.5.tgz",
+      "integrity": "sha512-LF7lF6zWEKxuT3/OR8wAZGzkg4ENGXFNyiV/JeOt9z5B+0ZVwbql9McqX5c/WStFq1GaGso7H1AzP/qSzmlCKQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*",
+        "pg-protocol": "*",
+        "pg-types": "^2.2.0"
+      }
+    },
     "node_modules/@types/react": {
       "version": "19.1.10",
       "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.10.tgz",
@@ -4577,6 +4591,12 @@
         }
       }
     },
+    "node_modules/node-ensure": {
+      "version": "0.0.0",
+      "resolved": "https://registry.npmjs.org/node-ensure/-/node-ensure-0.0.0.tgz",
+      "integrity": "sha512-DRI60hzo2oKN1ma0ckc6nQWlHU69RH6xN0sjQTjMpChPfTYvKZdcQFfdYK2RWbJcKyUizSIy/l8OTGxMAM1QDw==",
+      "license": "MIT"
+    },
     "node_modules/nth-check": {
       "version": "2.1.1",
       "resolved": "https://registry.npmjs.org/nth-check/-/nth-check-2.1.1.tgz",
@@ -4896,6 +4916,28 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/pdf-parse": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/pdf-parse/-/pdf-parse-1.1.1.tgz",
+      "integrity": "sha512-v6ZJ/efsBpGrGGknjtq9J/oC8tZWq0KWL5vQrk2GlzLEQPUDB1ex+13Rmidl1neNN358Jn9EHZw5y07FFtaC7A==",
+      "license": "MIT",
+      "dependencies": {
+        "debug": "^3.1.0",
+        "node-ensure": "^0.0.0"
+      },
+      "engines": {
+        "node": ">=6.8.1"
+      }
+    },
+    "node_modules/pdf-parse/node_modules/debug": {
+      "version": "3.2.7",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
+      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.1"
+      }
+    },
     "node_modules/pg": {
       "version": "8.16.3",
       "resolved": "https://registry.npmjs.org/pg/-/pg-8.16.3.tgz",
diff --git a/scripts/repair_published_at.sh b/scripts/repair_published_at.sh
old mode 100644
new mode 100755
-- 
2.43.0

